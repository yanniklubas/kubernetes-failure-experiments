# Registry and repository for Docker images
# Default is docker/robotshop/image:latest
image:
  repo: saurabhjha1
  version: 2.1.0-kubespray
  pullPolicy: Always
# EUM configuration
# Provide your key and set the endpoint
eum:
  key: null
  url: https://eum-eu-west-1.instana.io
  #url: https://eum-us-west-2.instana.io
databases:
  # define whether databases should also be resource-constrained
  applyResourceLimits: true
# Some Kubernetes filesystems (e.g. IBM Cloud Gold) require root access to volumes (set to true to change security context for rabbitmq and redis
# which be default run as non-root
rootOnlyFilesystem: false
# Pod Security Policy
psp:
  enabled: false
# For the mini ones minikube, minishift set to true
nodeport: true
# "special" Openshift. Set to true when deploying to any openshift flavour
openshift: false
ocCreateRoute: false
defaultReplicas: 4
rabbitmqReplicas: 1
topologyAwareServices: true
webRegion: us
######################################
# Affinities for individual workloads
# set in the following way:
# <workload>:
#   affinity: {}
#   nodeSelector: {}
#   tolerations: []
######################################
cart:
  nodeSelector:
    node-role: worker
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: service
                operator: In
                values:
                  - cart
          topologyKey: "kubernetes.io/hostname"
  tolerations:
    - key: "node.kubernetes.io/not-ready"
      operator: "Exists"
      effect: "NoExecute"
      tolerationSeconds: 1
catalogue:
  nodeSelector:
    node-role: worker
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: service
                operator: In
                values:
                  - catalogue
          topologyKey: "kubernetes.io/hostname"
  tolerations:
    - key: "node.kubernetes.io/not-ready"
      operator: "Exists"
      effect: "NoExecute"
      tolerationSeconds: 1
dispatch:
  nodeSelector:
    node-role: worker
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: service
                operator: In
                values:
                  - dispatch
          topologyKey: "kubernetes.io/hostname"
  tolerations:
    - key: "node.kubernetes.io/not-ready"
      operator: "Exists"
      effect: "NoExecute"
      tolerationSeconds: 1
mongodb:
  nodeSelector:
    node-role: worker
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: service
                operator: In
                values:
                  - mongodb
          topologyKey: "kubernetes.io/hostname"
  tolerations:
    - key: "node.kubernetes.io/not-ready"
      operator: "Exists"
      effect: "NoExecute"
      tolerationSeconds: 1
mysql:
  nodeSelector:
    node-role: worker
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: service
                operator: In
                values:
                  - mysql
          topologyKey: "kubernetes.io/hostname"
  tolerations:
    - key: "node.kubernetes.io/not-ready"
      operator: "Exists"
      effect: "NoExecute"
      tolerationSeconds: 1
payment:
  # Alternative payment gateway URL
  # Default is https://www.paypal.com
  gateway: null
  #gateway: https://www.worldpay.com
  # some Linux and Kubernetes distros (e.g. Minikube) use maxconn limit of 128, payment requires 200, set to true if required
  increaseMaxConn: false
  nodeSelector:
    node-role: worker
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: service
                operator: In
                values:
                  - payment
          topologyKey: "kubernetes.io/hostname"
  tolerations:
    - key: "node.kubernetes.io/not-ready"
      operator: "Exists"
      effect: "NoExecute"
      tolerationSeconds: 1
rabbitmq:
  nodeSelector:
    node-role: worker
  tolerations:
    - key: "node.kubernetes.io/not-ready"
      operator: "Exists"
      effect: "NoExecute"
      tolerationSeconds: 1
ratings:
  nodeSelector:
    node-role: worker
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: service
                operator: In
                values:
                  - ratings
          topologyKey: "kubernetes.io/hostname"
  tolerations:
    - key: "node.kubernetes.io/not-ready"
      operator: "Exists"
      effect: "NoExecute"
      tolerationSeconds: 1
redis:
  # Storage class to use with redis statefulset.
  storageClassName: standard
  nodeSelector:
    node-role: worker
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: service
                operator: In
                values:
                  - redis
          topologyKey: "kubernetes.io/hostname"
  tolerations:
    - key: "node.kubernetes.io/not-ready"
      operator: "Exists"
      effect: "NoExecute"
      tolerationSeconds: 1
shipping:
  nodeSelector:
    node-role: worker
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: service
                operator: In
                values:
                  - shipping
          topologyKey: "kubernetes.io/hostname"
  tolerations:
    - key: "node.kubernetes.io/not-ready"
      operator: "Exists"
      effect: "NoExecute"
      tolerationSeconds: 1
user:
  nodeSelector:
    node-role: worker
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: service
                operator: In
                values:
                  - user
          topologyKey: "kubernetes.io/hostname"
  tolerations:
    - key: "node.kubernetes.io/not-ready"
      operator: "Exists"
      effect: "NoExecute"
      tolerationSeconds: 1
web:
  nodeSelector:
    node-role: web
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: service
                operator: In
                values:
                  - web
          topologyKey: "kubernetes.io/hostname"
  tolerations:
    - key: "node.kubernetes.io/not-ready"
      operator: "Exists"
      effect: "NoExecute"
      tolerationSeconds: 1
instana:
  agent:
    # {instan-svc}.{namespace}
    host: instana-agent.instana-agent
    port: 42699
